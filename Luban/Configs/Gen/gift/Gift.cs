//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.gift
{ 

public sealed partial class Gift :  Bright.Config.BeanBase 
{
    public Gift(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  Name = _json["name"]; }
        { if(!_json["desc"].IsString) { throw new SerializationException(); }  Desc = _json["desc"]; }
        { if(!_json["price"].IsNumber) { throw new SerializationException(); }  Price = _json["price"]; }
        { var __json0 = _json["items"]; if(!__json0.IsArray) { throw new SerializationException(); } Items = new System.Collections.Generic.Dictionary<int, int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int _k0;  { if(!__e0[0].IsNumber) { throw new SerializationException(); }  _k0 = __e0[0]; } int _v0;  { if(!__e0[1].IsNumber) { throw new SerializationException(); }  _v0 = __e0[1]; }  Items.Add(_k0, _v0); }   }
        { var __json0 = _json["show_texture"]; if(!__json0.IsArray) { throw new SerializationException(); } int _n0 = __json0.Count; ShowTexture = new string[_n0]; int __index0=0; foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  ShowTexture[__index0++] = __v0; }   }
        { var __json0 = _json["show_effects"]; if(!__json0.IsArray) { throw new SerializationException(); } int _n0 = __json0.Count; ShowEffects = new string[_n0]; int __index0=0; foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  ShowEffects[__index0++] = __v0; }   }
        { var __json0 = _json["items_ex"]; if(!__json0.IsArray) { throw new SerializationException(); } int _n0 = __json0.Count; ItemsEx = new item.ItemPackage[_n0]; int __index0=0; foreach(JSONNode __e0 in __json0.Children) { item.ItemPackage __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = item.ItemPackage.DeserializeItemPackage(__e0);  }  ItemsEx[__index0++] = __v0; }   }
        PostInit();
    }

    public Gift(int id, string name, string desc, int price, System.Collections.Generic.Dictionary<int, int> items, string[] show_texture, string[] show_effects, item.ItemPackage[] items_ex ) 
    {
        this.Id = id;
        this.Name = name;
        this.Desc = desc;
        this.Price = price;
        this.Items = items;
        this.ShowTexture = show_texture;
        this.ShowEffects = show_effects;
        this.ItemsEx = items_ex;
        PostInit();
    }

    public static Gift DeserializeGift(JSONNode _json)
    {
        return new gift.Gift(_json);
    }

    /// <summary>
    /// id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 价格
    /// </summary>
    public int Price { get; private set; }
    /// <summary>
    /// 首次购买礼包内容
    /// </summary>
    public System.Collections.Generic.Dictionary<int, int> Items { get; private set; }
    /// <summary>
    /// 展示图片
    /// </summary>
    public string[] ShowTexture { get; private set; }
    /// <summary>
    /// 展示特效
    /// </summary>
    public string[] ShowEffects { get; private set; }
    /// <summary>
    /// 额外赠送
    /// </summary>
    public item.ItemPackage[] ItemsEx { get; private set; }

    public const int __ID__ = 524020558;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in ItemsEx) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in ItemsEx) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "Price:" + Price + ","
        + "Items:" + Bright.Common.StringUtil.CollectionToString(Items) + ","
        + "ShowTexture:" + Bright.Common.StringUtil.CollectionToString(ShowTexture) + ","
        + "ShowEffects:" + Bright.Common.StringUtil.CollectionToString(ShowEffects) + ","
        + "ItemsEx:" + Bright.Common.StringUtil.CollectionToString(ItemsEx) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
